/*
 * generated by Xtext 2.38.0
 */
grammar InternalBeathoven;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.beathoven.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.beathoven.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.beathoven.services.BeathovenGrammarAccess;

}

@parser::members {

 	private BeathovenGrammarAccess grammarAccess;

    public InternalBeathovenParser(TokenStream input, BeathovenGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected BeathovenGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getBlocksBlockParserRuleCall_0());
			}
			lv_blocks_0_0=ruleBlock
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"blocks",
					lv_blocks_0_0,
					"org.beathoven.Beathoven.Block");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBlockAccess().getTempoParserRuleCall_0());
		}
		this_Tempo_0=ruleTempo
		{
			$current = $this_Tempo_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getTimeParserRuleCall_1());
		}
		this_Time_1=ruleTime
		{
			$current = $this_Time_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getKeyParserRuleCall_2());
		}
		this_Key_2=ruleKey
		{
			$current = $this_Key_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getTitleParserRuleCall_3());
		}
		this_Title_3=ruleTitle
		{
			$current = $this_Title_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getInstrumentParserRuleCall_4());
		}
		this_Instrument_4=ruleInstrument
		{
			$current = $this_Instrument_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getNoteStmtParserRuleCall_5());
		}
		this_NoteStmt_5=ruleNoteStmt
		{
			$current = $this_NoteStmt_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getRestParserRuleCall_6());
		}
		this_Rest_6=ruleRest
		{
			$current = $this_Rest_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getChordParserRuleCall_7());
		}
		this_Chord_7=ruleChord
		{
			$current = $this_Chord_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getRepeatParserRuleCall_8());
		}
		this_Repeat_8=ruleRepeat
		{
			$current = $this_Repeat_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getMarkParserRuleCall_9());
		}
		this_Mark_9=ruleMark
		{
			$current = $this_Mark_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockAccess().getGotoParserRuleCall_10());
		}
		this_Goto_10=ruleGoto
		{
			$current = $this_Goto_10.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTempo
entryRuleTempo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTempoRule()); }
	iv_ruleTempo=ruleTempo
	{ $current=$iv_ruleTempo.current; }
	EOF;

// Rule Tempo
ruleTempo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TEMPO'
		{
			newLeafNode(otherlv_0, grammarAccess.getTempoAccess().getTEMPOKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getTempoAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTempoRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TIME'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeAccess().getTIMEKeyword_0());
		}
		(
			(
				lv_value_1_0=RULE_FRACTION
				{
					newLeafNode(lv_value_1_0, grammarAccess.getTimeAccess().getValueFractionTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.beathoven.Beathoven.Fraction");
				}
			)
		)
	)
;

// Entry rule entryRuleKey
entryRuleKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_ruleKey=ruleKey
	{ $current=$iv_ruleKey.current; }
	EOF;

// Rule Key
ruleKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='KEY'
		{
			newLeafNode(otherlv_0, grammarAccess.getKeyAccess().getKEYKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getKeyAccess().getNoteNoteValueParserRuleCall_1_0());
				}
				lv_note_1_0=ruleNoteValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getKeyRule());
					}
					set(
						$current,
						"note",
						lv_note_1_0,
						"org.beathoven.Beathoven.NoteValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTitle
entryRuleTitle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTitleRule()); }
	iv_ruleTitle=ruleTitle
	{ $current=$iv_ruleTitle.current; }
	EOF;

// Rule Title
ruleTitle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='TITLE'
		{
			newLeafNode(otherlv_0, grammarAccess.getTitleAccess().getTITLEKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTitleAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTitleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleInstrument
entryRuleInstrument returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInstrumentRule()); }
	iv_ruleInstrument=ruleInstrument
	{ $current=$iv_ruleInstrument.current; }
	EOF;

// Rule Instrument
ruleInstrument returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='INSTRUMENT'
		{
			newLeafNode(otherlv_0, grammarAccess.getInstrumentAccess().getINSTRUMENTKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInstrumentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInstrumentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleNoteStmt
entryRuleNoteStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNoteStmtRule()); }
	iv_ruleNoteStmt=ruleNoteStmt
	{ $current=$iv_ruleNoteStmt.current; }
	EOF;

// Rule NoteStmt
ruleNoteStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNoteStmtAccess().getPitchNoteValueParserRuleCall_0_0());
				}
				lv_pitch_0_0=ruleNoteValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNoteStmtRule());
					}
					set(
						$current,
						"pitch",
						lv_pitch_0_0,
						"org.beathoven.Beathoven.NoteValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNoteStmtAccess().getDurationDurationParserRuleCall_1_0());
				}
				lv_duration_1_0=ruleDuration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNoteStmtRule());
					}
					set(
						$current,
						"duration",
						lv_duration_1_0,
						"org.beathoven.Beathoven.Duration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRest
entryRuleRest returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRestRule()); }
	iv_ruleRest=ruleRest
	{ $current=$iv_ruleRest.current; }
	EOF;

// Rule Rest
ruleRest returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='R'
		{
			newLeafNode(otherlv_0, grammarAccess.getRestAccess().getRKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRestAccess().getDurationDurationParserRuleCall_1_0());
				}
				lv_duration_1_0=ruleDuration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRestRule());
					}
					set(
						$current,
						"duration",
						lv_duration_1_0,
						"org.beathoven.Beathoven.Duration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleChord
entryRuleChord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChordRule()); }
	iv_ruleChord=ruleChord
	{ $current=$iv_ruleChord.current; }
	EOF;

// Rule Chord
ruleChord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_chord_0_0='['
				{
					newLeafNode(lv_chord_0_0, grammarAccess.getChordAccess().getChordLeftSquareBracketKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChordRule());
					}
					setWithLastConsumed($current, "chord", lv_chord_0_0, "[");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChordAccess().getNotesNoteValueParserRuleCall_1_0());
				}
				lv_notes_1_0=ruleNoteValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChordRule());
					}
					add(
						$current,
						"notes",
						lv_notes_1_0,
						"org.beathoven.Beathoven.NoteValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getChordAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChordAccess().getNotesNoteValueParserRuleCall_2_1_0());
					}
					lv_notes_3_0=ruleNoteValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChordRule());
						}
						add(
							$current,
							"notes",
							lv_notes_3_0,
							"org.beathoven.Beathoven.NoteValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=']'
		{
			newLeafNode(otherlv_4, grammarAccess.getChordAccess().getRightSquareBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChordAccess().getDurationDurationParserRuleCall_4_0());
				}
				lv_duration_5_0=ruleDuration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChordRule());
					}
					set(
						$current,
						"duration",
						lv_duration_5_0,
						"org.beathoven.Beathoven.Duration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRepeat
entryRuleRepeat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatRule()); }
	iv_ruleRepeat=ruleRepeat
	{ $current=$iv_ruleRepeat.current; }
	EOF;

// Rule Repeat
ruleRepeat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='REPEAT'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeatAccess().getREPEATKeyword_0());
		}
		(
			(
				lv_times_1_0=RULE_INT
				{
					newLeafNode(lv_times_1_0, grammarAccess.getRepeatAccess().getTimesINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRepeatRule());
					}
					setWithLastConsumed(
						$current,
						"times",
						lv_times_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRepeatAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatAccess().getBlocksBlockParserRuleCall_3_0());
				}
				lv_blocks_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatRule());
					}
					add(
						$current,
						"blocks",
						lv_blocks_3_0,
						"org.beathoven.Beathoven.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRepeatAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleMark
entryRuleMark returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMarkRule()); }
	iv_ruleMark=ruleMark
	{ $current=$iv_ruleMark.current; }
	EOF;

// Rule Mark
ruleMark returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MARK'
		{
			newLeafNode(otherlv_0, grammarAccess.getMarkAccess().getMARKKeyword_0());
		}
		(
			(
				lv_label_1_0=RULE_ID
				{
					newLeafNode(lv_label_1_0, grammarAccess.getMarkAccess().getLabelIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMarkRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleGoto
entryRuleGoto returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGotoRule()); }
	iv_ruleGoto=ruleGoto
	{ $current=$iv_ruleGoto.current; }
	EOF;

// Rule Goto
ruleGoto returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GOTO'
		{
			newLeafNode(otherlv_0, grammarAccess.getGotoAccess().getGOTOKeyword_0());
		}
		(
			(
				lv_label_1_0=RULE_ID
				{
					newLeafNode(lv_label_1_0, grammarAccess.getGotoAccess().getLabelIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getGotoRule());
					}
					setWithLastConsumed(
						$current,
						"label",
						lv_label_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleNoteValue
entryRuleNoteValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNoteValueRule()); }
	iv_ruleNoteValue=ruleNoteValue
	{ $current=$iv_ruleNoteValue.current; }
	EOF;

// Rule NoteValue
ruleNoteValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_NOTE_TOKEN
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNoteValueAccess().getValueNOTE_TOKENTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNoteValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.beathoven.Beathoven.NOTE_TOKEN");
			}
		)
	)
;

// Entry rule entryRuleDuration
entryRuleDuration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDurationRule()); }
	iv_ruleDuration=ruleDuration
	{ $current=$iv_ruleDuration.current; }
	EOF;

// Rule Duration
ruleDuration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_DUR_TOKEN
			{
				newLeafNode(lv_value_0_0, grammarAccess.getDurationAccess().getValueDUR_TOKENTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDurationRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.beathoven.Beathoven.DUR_TOKEN");
			}
		)
	)
;

RULE_NOTE_TOKEN : 'A'..'G' ('#'|'b')? ('0'..'8')?;

RULE_DUR_TOKEN : ('W'|'H'|'Q'|'E'|'S');

RULE_FRACTION : RULE_INT '/' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
