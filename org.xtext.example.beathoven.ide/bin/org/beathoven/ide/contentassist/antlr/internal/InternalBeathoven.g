/*
 * generated by Xtext 2.38.0
 */
grammar InternalBeathoven;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.beathoven.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.beathoven.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.beathoven.services.BeathovenGrammarAccess;

}
@parser::members {
	private BeathovenGrammarAccess grammarAccess;

	public void setGrammarAccess(BeathovenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getBlocksAssignment()); }
		(rule__Model__BlocksAssignment)*
		{ after(grammarAccess.getModelAccess().getBlocksAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getAlternatives()); }
		(rule__Block__Alternatives)
		{ after(grammarAccess.getBlockAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTempo
entryRuleTempo
:
{ before(grammarAccess.getTempoRule()); }
	 ruleTempo
{ after(grammarAccess.getTempoRule()); } 
	 EOF 
;

// Rule Tempo
ruleTempo 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTempoAccess().getGroup()); }
		(rule__Tempo__Group__0)
		{ after(grammarAccess.getTempoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTime
entryRuleTime
:
{ before(grammarAccess.getTimeRule()); }
	 ruleTime
{ after(grammarAccess.getTimeRule()); } 
	 EOF 
;

// Rule Time
ruleTime 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTimeAccess().getGroup()); }
		(rule__Time__Group__0)
		{ after(grammarAccess.getTimeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleKey
entryRuleKey
:
{ before(grammarAccess.getKeyRule()); }
	 ruleKey
{ after(grammarAccess.getKeyRule()); } 
	 EOF 
;

// Rule Key
ruleKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKeyAccess().getGroup()); }
		(rule__Key__Group__0)
		{ after(grammarAccess.getKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTitle
entryRuleTitle
:
{ before(grammarAccess.getTitleRule()); }
	 ruleTitle
{ after(grammarAccess.getTitleRule()); } 
	 EOF 
;

// Rule Title
ruleTitle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTitleAccess().getGroup()); }
		(rule__Title__Group__0)
		{ after(grammarAccess.getTitleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstrument
entryRuleInstrument
:
{ before(grammarAccess.getInstrumentRule()); }
	 ruleInstrument
{ after(grammarAccess.getInstrumentRule()); } 
	 EOF 
;

// Rule Instrument
ruleInstrument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstrumentAccess().getGroup()); }
		(rule__Instrument__Group__0)
		{ after(grammarAccess.getInstrumentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNoteStmt
entryRuleNoteStmt
:
{ before(grammarAccess.getNoteStmtRule()); }
	 ruleNoteStmt
{ after(grammarAccess.getNoteStmtRule()); } 
	 EOF 
;

// Rule NoteStmt
ruleNoteStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNoteStmtAccess().getGroup()); }
		(rule__NoteStmt__Group__0)
		{ after(grammarAccess.getNoteStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRest
entryRuleRest
:
{ before(grammarAccess.getRestRule()); }
	 ruleRest
{ after(grammarAccess.getRestRule()); } 
	 EOF 
;

// Rule Rest
ruleRest 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRestAccess().getGroup()); }
		(rule__Rest__Group__0)
		{ after(grammarAccess.getRestAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChord
entryRuleChord
:
{ before(grammarAccess.getChordRule()); }
	 ruleChord
{ after(grammarAccess.getChordRule()); } 
	 EOF 
;

// Rule Chord
ruleChord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChordAccess().getGroup()); }
		(rule__Chord__Group__0)
		{ after(grammarAccess.getChordAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRepeat
entryRuleRepeat
:
{ before(grammarAccess.getRepeatRule()); }
	 ruleRepeat
{ after(grammarAccess.getRepeatRule()); } 
	 EOF 
;

// Rule Repeat
ruleRepeat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepeatAccess().getGroup()); }
		(rule__Repeat__Group__0)
		{ after(grammarAccess.getRepeatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMark
entryRuleMark
:
{ before(grammarAccess.getMarkRule()); }
	 ruleMark
{ after(grammarAccess.getMarkRule()); } 
	 EOF 
;

// Rule Mark
ruleMark 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMarkAccess().getGroup()); }
		(rule__Mark__Group__0)
		{ after(grammarAccess.getMarkAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoto
entryRuleGoto
:
{ before(grammarAccess.getGotoRule()); }
	 ruleGoto
{ after(grammarAccess.getGotoRule()); } 
	 EOF 
;

// Rule Goto
ruleGoto 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGotoAccess().getGroup()); }
		(rule__Goto__Group__0)
		{ after(grammarAccess.getGotoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNoteValue
entryRuleNoteValue
:
{ before(grammarAccess.getNoteValueRule()); }
	 ruleNoteValue
{ after(grammarAccess.getNoteValueRule()); } 
	 EOF 
;

// Rule NoteValue
ruleNoteValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNoteValueAccess().getValueAssignment()); }
		(rule__NoteValue__ValueAssignment)
		{ after(grammarAccess.getNoteValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDuration
entryRuleDuration
:
{ before(grammarAccess.getDurationRule()); }
	 ruleDuration
{ after(grammarAccess.getDurationRule()); } 
	 EOF 
;

// Rule Duration
ruleDuration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDurationAccess().getValueAssignment()); }
		(rule__Duration__ValueAssignment)
		{ after(grammarAccess.getDurationAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getTempoParserRuleCall_0()); }
		ruleTempo
		{ after(grammarAccess.getBlockAccess().getTempoParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getTimeParserRuleCall_1()); }
		ruleTime
		{ after(grammarAccess.getBlockAccess().getTimeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getKeyParserRuleCall_2()); }
		ruleKey
		{ after(grammarAccess.getBlockAccess().getKeyParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getTitleParserRuleCall_3()); }
		ruleTitle
		{ after(grammarAccess.getBlockAccess().getTitleParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getInstrumentParserRuleCall_4()); }
		ruleInstrument
		{ after(grammarAccess.getBlockAccess().getInstrumentParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getNoteStmtParserRuleCall_5()); }
		ruleNoteStmt
		{ after(grammarAccess.getBlockAccess().getNoteStmtParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getRestParserRuleCall_6()); }
		ruleRest
		{ after(grammarAccess.getBlockAccess().getRestParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getChordParserRuleCall_7()); }
		ruleChord
		{ after(grammarAccess.getBlockAccess().getChordParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getRepeatParserRuleCall_8()); }
		ruleRepeat
		{ after(grammarAccess.getBlockAccess().getRepeatParserRuleCall_8()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getMarkParserRuleCall_9()); }
		ruleMark
		{ after(grammarAccess.getBlockAccess().getMarkParserRuleCall_9()); }
	)
	|
	(
		{ before(grammarAccess.getBlockAccess().getGotoParserRuleCall_10()); }
		ruleGoto
		{ after(grammarAccess.getBlockAccess().getGotoParserRuleCall_10()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tempo__Group__0__Impl
	rule__Tempo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTempoAccess().getTEMPOKeyword_0()); }
	'TEMPO'
	{ after(grammarAccess.getTempoAccess().getTEMPOKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tempo__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTempoAccess().getValueAssignment_1()); }
	(rule__Tempo__ValueAssignment_1)
	{ after(grammarAccess.getTempoAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Time__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__0__Impl
	rule__Time__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getTIMEKeyword_0()); }
	'TIME'
	{ after(grammarAccess.getTimeAccess().getTIMEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Time__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTimeAccess().getValueAssignment_1()); }
	(rule__Time__ValueAssignment_1)
	{ after(grammarAccess.getTimeAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Key__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__0__Impl
	rule__Key__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getKEYKeyword_0()); }
	'KEY'
	{ after(grammarAccess.getKeyAccess().getKEYKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Key__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKeyAccess().getNoteAssignment_1()); }
	(rule__Key__NoteAssignment_1)
	{ after(grammarAccess.getKeyAccess().getNoteAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Title__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__0__Impl
	rule__Title__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getTITLEKeyword_0()); }
	'TITLE'
	{ after(grammarAccess.getTitleAccess().getTITLEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getNameAssignment_1()); }
	(rule__Title__NameAssignment_1)
	{ after(grammarAccess.getTitleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Instrument__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instrument__Group__0__Impl
	rule__Instrument__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instrument__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstrumentAccess().getINSTRUMENTKeyword_0()); }
	'INSTRUMENT'
	{ after(grammarAccess.getInstrumentAccess().getINSTRUMENTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instrument__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Instrument__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instrument__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInstrumentAccess().getNameAssignment_1()); }
	(rule__Instrument__NameAssignment_1)
	{ after(grammarAccess.getInstrumentAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NoteStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NoteStmt__Group__0__Impl
	rule__NoteStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NoteStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoteStmtAccess().getPitchAssignment_0()); }
	(rule__NoteStmt__PitchAssignment_0)
	{ after(grammarAccess.getNoteStmtAccess().getPitchAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoteStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NoteStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NoteStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoteStmtAccess().getDurationAssignment_1()); }
	(rule__NoteStmt__DurationAssignment_1)
	{ after(grammarAccess.getNoteStmtAccess().getDurationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rest__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rest__Group__0__Impl
	rule__Rest__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestAccess().getRKeyword_0()); }
	'R'
	{ after(grammarAccess.getRestAccess().getRKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rest__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestAccess().getDurationAssignment_1()); }
	(rule__Rest__DurationAssignment_1)
	{ after(grammarAccess.getRestAccess().getDurationAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Chord__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chord__Group__0__Impl
	rule__Chord__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChordAccess().getChordAssignment_0()); }
	(rule__Chord__ChordAssignment_0)
	{ after(grammarAccess.getChordAccess().getChordAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chord__Group__1__Impl
	rule__Chord__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChordAccess().getNotesAssignment_1()); }
	(rule__Chord__NotesAssignment_1)
	{ after(grammarAccess.getChordAccess().getNotesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chord__Group__2__Impl
	rule__Chord__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChordAccess().getGroup_2()); }
	(rule__Chord__Group_2__0)*
	{ after(grammarAccess.getChordAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chord__Group__3__Impl
	rule__Chord__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChordAccess().getRightSquareBracketKeyword_3()); }
	']'
	{ after(grammarAccess.getChordAccess().getRightSquareBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chord__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChordAccess().getDurationAssignment_4()); }
	(rule__Chord__DurationAssignment_4)
	{ after(grammarAccess.getChordAccess().getDurationAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Chord__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chord__Group_2__0__Impl
	rule__Chord__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChordAccess().getCommaKeyword_2_0()); }
	','
	{ after(grammarAccess.getChordAccess().getCommaKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Chord__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getChordAccess().getNotesAssignment_2_1()); }
	(rule__Chord__NotesAssignment_2_1)
	{ after(grammarAccess.getChordAccess().getNotesAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Repeat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__0__Impl
	rule__Repeat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getREPEATKeyword_0()); }
	'REPEAT'
	{ after(grammarAccess.getRepeatAccess().getREPEATKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__1__Impl
	rule__Repeat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getTimesAssignment_1()); }
	(rule__Repeat__TimesAssignment_1)
	{ after(grammarAccess.getRepeatAccess().getTimesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__2__Impl
	rule__Repeat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getRepeatAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__3__Impl
	rule__Repeat__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getBlocksAssignment_3()); }
	(rule__Repeat__BlocksAssignment_3)*
	{ after(grammarAccess.getRepeatAccess().getBlocksAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getRepeatAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mark__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mark__Group__0__Impl
	rule__Mark__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkAccess().getMARKKeyword_0()); }
	'MARK'
	{ after(grammarAccess.getMarkAccess().getMARKKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mark__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMarkAccess().getLabelAssignment_1()); }
	(rule__Mark__LabelAssignment_1)
	{ after(grammarAccess.getMarkAccess().getLabelAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Goto__Group__0__Impl
	rule__Goto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoAccess().getGOTOKeyword_0()); }
	'GOTO'
	{ after(grammarAccess.getGotoAccess().getGOTOKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Goto__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoAccess().getLabelAssignment_1()); }
	(rule__Goto__LabelAssignment_1)
	{ after(grammarAccess.getGotoAccess().getLabelAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__BlocksAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getBlocksBlockParserRuleCall_0()); }
		ruleBlock
		{ after(grammarAccess.getModelAccess().getBlocksBlockParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tempo__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTempoAccess().getValueINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getTempoAccess().getValueINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Time__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTimeAccess().getValueFractionTerminalRuleCall_1_0()); }
		RULE_FRACTION
		{ after(grammarAccess.getTimeAccess().getValueFractionTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Key__NoteAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKeyAccess().getNoteNoteValueParserRuleCall_1_0()); }
		ruleNoteValue
		{ after(grammarAccess.getKeyAccess().getNoteNoteValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getTitleAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instrument__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstrumentAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getInstrumentAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoteStmt__PitchAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteStmtAccess().getPitchNoteValueParserRuleCall_0_0()); }
		ruleNoteValue
		{ after(grammarAccess.getNoteStmtAccess().getPitchNoteValueParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoteStmt__DurationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteStmtAccess().getDurationDurationParserRuleCall_1_0()); }
		ruleDuration
		{ after(grammarAccess.getNoteStmtAccess().getDurationDurationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rest__DurationAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRestAccess().getDurationDurationParserRuleCall_1_0()); }
		ruleDuration
		{ after(grammarAccess.getRestAccess().getDurationDurationParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__ChordAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChordAccess().getChordLeftSquareBracketKeyword_0_0()); }
		(
			{ before(grammarAccess.getChordAccess().getChordLeftSquareBracketKeyword_0_0()); }
			'['
			{ after(grammarAccess.getChordAccess().getChordLeftSquareBracketKeyword_0_0()); }
		)
		{ after(grammarAccess.getChordAccess().getChordLeftSquareBracketKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__NotesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChordAccess().getNotesNoteValueParserRuleCall_1_0()); }
		ruleNoteValue
		{ after(grammarAccess.getChordAccess().getNotesNoteValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__NotesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChordAccess().getNotesNoteValueParserRuleCall_2_1_0()); }
		ruleNoteValue
		{ after(grammarAccess.getChordAccess().getNotesNoteValueParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Chord__DurationAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChordAccess().getDurationDurationParserRuleCall_4_0()); }
		ruleDuration
		{ after(grammarAccess.getChordAccess().getDurationDurationParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__TimesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatAccess().getTimesINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getRepeatAccess().getTimesINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__BlocksAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatAccess().getBlocksBlockParserRuleCall_3_0()); }
		ruleBlock
		{ after(grammarAccess.getRepeatAccess().getBlocksBlockParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mark__LabelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMarkAccess().getLabelIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getMarkAccess().getLabelIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__LabelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGotoAccess().getLabelIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getGotoAccess().getLabelIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoteValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteValueAccess().getValueNOTE_TOKENTerminalRuleCall_0()); }
		RULE_NOTE_TOKEN
		{ after(grammarAccess.getNoteValueAccess().getValueNOTE_TOKENTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Duration__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDurationAccess().getValueDUR_TOKENTerminalRuleCall_0()); }
		RULE_DUR_TOKEN
		{ after(grammarAccess.getDurationAccess().getValueDUR_TOKENTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_NOTE_TOKEN : 'A'..'G' ('#'|'b')? ('0'..'8')?;

RULE_DUR_TOKEN : ('W'|'H'|'Q'|'E'|'S');

RULE_FRACTION : RULE_INT '/' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
