/*
 * generated by Xtext 2.38.0
 */
package org.beathoven.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BeathovenGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Model");
		private final Assignment cBlocksAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBlocksBlockParserRuleCall_0 = (RuleCall)cBlocksAssignment.eContents().get(0);
		
		//Model:
		//    blocks+=Block*;
		@Override public ParserRule getRule() { return rule; }
		
		//blocks+=Block*
		public Assignment getBlocksAssignment() { return cBlocksAssignment; }
		
		//Block
		public RuleCall getBlocksBlockParserRuleCall_0() { return cBlocksBlockParserRuleCall_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTempoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKeyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTitleParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cInstrumentParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNoteStmtParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cRestParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cChordParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRepeatParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cMarkParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cGotoParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Block:
		//    Tempo | Time | Key | Title | Instrument |
		//    NoteStmt | Rest | Chord |
		//    Repeat | Mark | Goto;
		@Override public ParserRule getRule() { return rule; }
		
		//Tempo | Time | Key | Title | Instrument |
		//NoteStmt | Rest | Chord |
		//Repeat | Mark | Goto
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Tempo
		public RuleCall getTempoParserRuleCall_0() { return cTempoParserRuleCall_0; }
		
		//Time
		public RuleCall getTimeParserRuleCall_1() { return cTimeParserRuleCall_1; }
		
		//Key
		public RuleCall getKeyParserRuleCall_2() { return cKeyParserRuleCall_2; }
		
		//Title
		public RuleCall getTitleParserRuleCall_3() { return cTitleParserRuleCall_3; }
		
		//Instrument
		public RuleCall getInstrumentParserRuleCall_4() { return cInstrumentParserRuleCall_4; }
		
		//NoteStmt
		public RuleCall getNoteStmtParserRuleCall_5() { return cNoteStmtParserRuleCall_5; }
		
		//Rest
		public RuleCall getRestParserRuleCall_6() { return cRestParserRuleCall_6; }
		
		//Chord
		public RuleCall getChordParserRuleCall_7() { return cChordParserRuleCall_7; }
		
		//Repeat
		public RuleCall getRepeatParserRuleCall_8() { return cRepeatParserRuleCall_8; }
		
		//Mark
		public RuleCall getMarkParserRuleCall_9() { return cMarkParserRuleCall_9; }
		
		//Goto
		public RuleCall getGotoParserRuleCall_10() { return cGotoParserRuleCall_10; }
	}
	public class TempoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Tempo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTEMPOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Tempo:
		//    'TEMPO' value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'TEMPO' value=INT
		public Group getGroup() { return cGroup; }
		
		//'TEMPO'
		public Keyword getTEMPOKeyword_0() { return cTEMPOKeyword_0; }
		
		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTIMEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueFractionTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Time:
		//    'TIME' value=Fraction;
		@Override public ParserRule getRule() { return rule; }
		
		//'TIME' value=Fraction
		public Group getGroup() { return cGroup; }
		
		//'TIME'
		public Keyword getTIMEKeyword_0() { return cTIMEKeyword_0; }
		
		//value=Fraction
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Fraction
		public RuleCall getValueFractionTerminalRuleCall_1_0() { return cValueFractionTerminalRuleCall_1_0; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKEYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNoteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNoteNoteValueParserRuleCall_1_0 = (RuleCall)cNoteAssignment_1.eContents().get(0);
		
		//Key:
		//    'KEY' note=NoteValue;
		@Override public ParserRule getRule() { return rule; }
		
		//'KEY' note=NoteValue
		public Group getGroup() { return cGroup; }
		
		//'KEY'
		public Keyword getKEYKeyword_0() { return cKEYKeyword_0; }
		
		//note=NoteValue
		public Assignment getNoteAssignment_1() { return cNoteAssignment_1; }
		
		//NoteValue
		public RuleCall getNoteNoteValueParserRuleCall_1_0() { return cNoteNoteValueParserRuleCall_1_0; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTITLEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Title:
		//    'TITLE' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'TITLE' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'TITLE'
		public Keyword getTITLEKeyword_0() { return cTITLEKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class InstrumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Instrument");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINSTRUMENTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Instrument:
		//    'INSTRUMENT' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'INSTRUMENT' name=ID
		public Group getGroup() { return cGroup; }
		
		//'INSTRUMENT'
		public Keyword getINSTRUMENTKeyword_0() { return cINSTRUMENTKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class NoteStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.NoteStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPitchAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPitchNoteValueParserRuleCall_0_0 = (RuleCall)cPitchAssignment_0.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationDurationParserRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		
		//NoteStmt:
		//    pitch=NoteValue duration=Duration;
		@Override public ParserRule getRule() { return rule; }
		
		//pitch=NoteValue duration=Duration
		public Group getGroup() { return cGroup; }
		
		//pitch=NoteValue
		public Assignment getPitchAssignment_0() { return cPitchAssignment_0; }
		
		//NoteValue
		public RuleCall getPitchNoteValueParserRuleCall_0_0() { return cPitchNoteValueParserRuleCall_0_0; }
		
		//duration=Duration
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_1_0() { return cDurationDurationParserRuleCall_1_0; }
	}
	public class RestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Rest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDurationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDurationDurationParserRuleCall_1_0 = (RuleCall)cDurationAssignment_1.eContents().get(0);
		
		//Rest:
		//    'R' duration=Duration;
		@Override public ParserRule getRule() { return rule; }
		
		//'R' duration=Duration
		public Group getGroup() { return cGroup; }
		
		//'R'
		public Keyword getRKeyword_0() { return cRKeyword_0; }
		
		//duration=Duration
		public Assignment getDurationAssignment_1() { return cDurationAssignment_1; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_1_0() { return cDurationDurationParserRuleCall_1_0; }
	}
	public class ChordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Chord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cChordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cChordLeftSquareBracketKeyword_0_0 = (Keyword)cChordAssignment_0.eContents().get(0);
		private final Assignment cNotesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNotesNoteValueParserRuleCall_1_0 = (RuleCall)cNotesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNotesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNotesNoteValueParserRuleCall_2_1_0 = (RuleCall)cNotesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDurationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDurationDurationParserRuleCall_4_0 = (RuleCall)cDurationAssignment_4.eContents().get(0);
		
		//Chord:
		//    chord='[' notes+=NoteValue (',' notes+=NoteValue)* ']' duration=Duration;
		@Override public ParserRule getRule() { return rule; }
		
		//chord='[' notes+=NoteValue (',' notes+=NoteValue)* ']' duration=Duration
		public Group getGroup() { return cGroup; }
		
		//chord='['
		public Assignment getChordAssignment_0() { return cChordAssignment_0; }
		
		//'['
		public Keyword getChordLeftSquareBracketKeyword_0_0() { return cChordLeftSquareBracketKeyword_0_0; }
		
		//notes+=NoteValue
		public Assignment getNotesAssignment_1() { return cNotesAssignment_1; }
		
		//NoteValue
		public RuleCall getNotesNoteValueParserRuleCall_1_0() { return cNotesNoteValueParserRuleCall_1_0; }
		
		//(',' notes+=NoteValue)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//notes+=NoteValue
		public Assignment getNotesAssignment_2_1() { return cNotesAssignment_2_1; }
		
		//NoteValue
		public RuleCall getNotesNoteValueParserRuleCall_2_1_0() { return cNotesNoteValueParserRuleCall_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//duration=Duration
		public Assignment getDurationAssignment_4() { return cDurationAssignment_4; }
		
		//Duration
		public RuleCall getDurationDurationParserRuleCall_4_0() { return cDurationDurationParserRuleCall_4_0; }
	}
	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREPEATKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTimesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimesINTTerminalRuleCall_1_0 = (RuleCall)cTimesAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlocksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlocksBlockParserRuleCall_3_0 = (RuleCall)cBlocksAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Repeat:
		//    'REPEAT' times=INT '{' blocks+=Block* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'REPEAT' times=INT '{' blocks+=Block* '}'
		public Group getGroup() { return cGroup; }
		
		//'REPEAT'
		public Keyword getREPEATKeyword_0() { return cREPEATKeyword_0; }
		
		//times=INT
		public Assignment getTimesAssignment_1() { return cTimesAssignment_1; }
		
		//INT
		public RuleCall getTimesINTTerminalRuleCall_1_0() { return cTimesINTTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//blocks+=Block*
		public Assignment getBlocksAssignment_3() { return cBlocksAssignment_3; }
		
		//Block
		public RuleCall getBlocksBlockParserRuleCall_3_0() { return cBlocksBlockParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Mark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMARKKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//Mark:
		//    'MARK' label=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'MARK' label=ID
		public Group getGroup() { return cGroup; }
		
		//'MARK'
		public Keyword getMARKKeyword_0() { return cMARKKeyword_0; }
		
		//label=ID
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0() { return cLabelIDTerminalRuleCall_1_0; }
	}
	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGOTOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLabelIDTerminalRuleCall_1_0 = (RuleCall)cLabelAssignment_1.eContents().get(0);
		
		//Goto:
		//    'GOTO' label=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'GOTO' label=ID
		public Group getGroup() { return cGroup; }
		
		//'GOTO'
		public Keyword getGOTOKeyword_0() { return cGOTOKeyword_0; }
		
		//label=ID
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }
		
		//ID
		public RuleCall getLabelIDTerminalRuleCall_1_0() { return cLabelIDTerminalRuleCall_1_0; }
	}
	public class NoteValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.NoteValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNOTE_TOKENTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NoteValue:
		//    value=NOTE_TOKEN;
		@Override public ParserRule getRule() { return rule; }
		
		//value=NOTE_TOKEN
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//NOTE_TOKEN
		public RuleCall getValueNOTE_TOKENTerminalRuleCall_0() { return cValueNOTE_TOKENTerminalRuleCall_0; }
	}
	public class DurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Duration");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDUR_TOKENTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Duration:
		//    value=DUR_TOKEN;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DUR_TOKEN
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DUR_TOKEN
		public RuleCall getValueDUR_TOKENTerminalRuleCall_0() { return cValueDUR_TOKENTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final BlockElements pBlock;
	private final TempoElements pTempo;
	private final TimeElements pTime;
	private final KeyElements pKey;
	private final TitleElements pTitle;
	private final InstrumentElements pInstrument;
	private final NoteStmtElements pNoteStmt;
	private final RestElements pRest;
	private final ChordElements pChord;
	private final RepeatElements pRepeat;
	private final MarkElements pMark;
	private final GotoElements pGoto;
	private final NoteValueElements pNoteValue;
	private final DurationElements pDuration;
	private final TerminalRule tNOTE_TOKEN;
	private final TerminalRule tDUR_TOKEN;
	private final TerminalRule tFraction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BeathovenGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pBlock = new BlockElements();
		this.pTempo = new TempoElements();
		this.pTime = new TimeElements();
		this.pKey = new KeyElements();
		this.pTitle = new TitleElements();
		this.pInstrument = new InstrumentElements();
		this.pNoteStmt = new NoteStmtElements();
		this.pRest = new RestElements();
		this.pChord = new ChordElements();
		this.pRepeat = new RepeatElements();
		this.pMark = new MarkElements();
		this.pGoto = new GotoElements();
		this.pNoteValue = new NoteValueElements();
		this.pDuration = new DurationElements();
		this.tNOTE_TOKEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.NOTE_TOKEN");
		this.tDUR_TOKEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.DUR_TOKEN");
		this.tFraction = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.beathoven.Beathoven.Fraction");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.beathoven.Beathoven".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    blocks+=Block*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Block:
	//    Tempo | Time | Key | Title | Instrument |
	//    NoteStmt | Rest | Chord |
	//    Repeat | Mark | Goto;
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Tempo:
	//    'TEMPO' value=INT;
	public TempoElements getTempoAccess() {
		return pTempo;
	}
	
	public ParserRule getTempoRule() {
		return getTempoAccess().getRule();
	}
	
	//Time:
	//    'TIME' value=Fraction;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//Key:
	//    'KEY' note=NoteValue;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//Title:
	//    'TITLE' name=STRING;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//Instrument:
	//    'INSTRUMENT' name=ID;
	public InstrumentElements getInstrumentAccess() {
		return pInstrument;
	}
	
	public ParserRule getInstrumentRule() {
		return getInstrumentAccess().getRule();
	}
	
	//NoteStmt:
	//    pitch=NoteValue duration=Duration;
	public NoteStmtElements getNoteStmtAccess() {
		return pNoteStmt;
	}
	
	public ParserRule getNoteStmtRule() {
		return getNoteStmtAccess().getRule();
	}
	
	//Rest:
	//    'R' duration=Duration;
	public RestElements getRestAccess() {
		return pRest;
	}
	
	public ParserRule getRestRule() {
		return getRestAccess().getRule();
	}
	
	//Chord:
	//    chord='[' notes+=NoteValue (',' notes+=NoteValue)* ']' duration=Duration;
	public ChordElements getChordAccess() {
		return pChord;
	}
	
	public ParserRule getChordRule() {
		return getChordAccess().getRule();
	}
	
	//Repeat:
	//    'REPEAT' times=INT '{' blocks+=Block* '}';
	public RepeatElements getRepeatAccess() {
		return pRepeat;
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}
	
	//Mark:
	//    'MARK' label=ID;
	public MarkElements getMarkAccess() {
		return pMark;
	}
	
	public ParserRule getMarkRule() {
		return getMarkAccess().getRule();
	}
	
	//Goto:
	//    'GOTO' label=ID;
	public GotoElements getGotoAccess() {
		return pGoto;
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}
	
	//NoteValue:
	//    value=NOTE_TOKEN;
	public NoteValueElements getNoteValueAccess() {
		return pNoteValue;
	}
	
	public ParserRule getNoteValueRule() {
		return getNoteValueAccess().getRule();
	}
	
	//Duration:
	//    value=DUR_TOKEN;
	public DurationElements getDurationAccess() {
		return pDuration;
	}
	
	public ParserRule getDurationRule() {
		return getDurationAccess().getRule();
	}
	
	//terminal NOTE_TOKEN:
	//    ('A'..'G') ('#' | 'b')? ('0'..'8')?;
	public TerminalRule getNOTE_TOKENRule() {
		return tNOTE_TOKEN;
	}
	
	//terminal DUR_TOKEN:
	//    'W' | 'H' | 'Q' | 'E' | 'S';
	public TerminalRule getDUR_TOKENRule() {
		return tDUR_TOKEN;
	}
	
	//terminal Fraction:
	//    INT '/' INT;
	public TerminalRule getFractionRule() {
		return tFraction;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
