/*
 * generated by Xtext 2.38.0
 */
package org.beathoven.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.beathoven.ide.contentassist.antlr.internal.InternalBeathovenParser;
import org.beathoven.services.BeathovenGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BeathovenParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BeathovenGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BeathovenGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBlockAccess().getAlternatives(), "rule__Block__Alternatives");
			builder.put(grammarAccess.getTempoAccess().getGroup(), "rule__Tempo__Group__0");
			builder.put(grammarAccess.getTimeAccess().getGroup(), "rule__Time__Group__0");
			builder.put(grammarAccess.getKeyAccess().getGroup(), "rule__Key__Group__0");
			builder.put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
			builder.put(grammarAccess.getInstrumentAccess().getGroup(), "rule__Instrument__Group__0");
			builder.put(grammarAccess.getNoteStmtAccess().getGroup(), "rule__NoteStmt__Group__0");
			builder.put(grammarAccess.getRestAccess().getGroup(), "rule__Rest__Group__0");
			builder.put(grammarAccess.getChordAccess().getGroup(), "rule__Chord__Group__0");
			builder.put(grammarAccess.getChordAccess().getGroup_2(), "rule__Chord__Group_2__0");
			builder.put(grammarAccess.getRepeatAccess().getGroup(), "rule__Repeat__Group__0");
			builder.put(grammarAccess.getMarkAccess().getGroup(), "rule__Mark__Group__0");
			builder.put(grammarAccess.getGotoAccess().getGroup(), "rule__Goto__Group__0");
			builder.put(grammarAccess.getModelAccess().getBlocksAssignment(), "rule__Model__BlocksAssignment");
			builder.put(grammarAccess.getTempoAccess().getValueAssignment_1(), "rule__Tempo__ValueAssignment_1");
			builder.put(grammarAccess.getTimeAccess().getValueAssignment_1(), "rule__Time__ValueAssignment_1");
			builder.put(grammarAccess.getKeyAccess().getNoteAssignment_1(), "rule__Key__NoteAssignment_1");
			builder.put(grammarAccess.getTitleAccess().getNameAssignment_1(), "rule__Title__NameAssignment_1");
			builder.put(grammarAccess.getInstrumentAccess().getNameAssignment_1(), "rule__Instrument__NameAssignment_1");
			builder.put(grammarAccess.getNoteStmtAccess().getPitchAssignment_0(), "rule__NoteStmt__PitchAssignment_0");
			builder.put(grammarAccess.getNoteStmtAccess().getDurationAssignment_1(), "rule__NoteStmt__DurationAssignment_1");
			builder.put(grammarAccess.getRestAccess().getDurationAssignment_1(), "rule__Rest__DurationAssignment_1");
			builder.put(grammarAccess.getChordAccess().getChordAssignment_0(), "rule__Chord__ChordAssignment_0");
			builder.put(grammarAccess.getChordAccess().getNotesAssignment_1(), "rule__Chord__NotesAssignment_1");
			builder.put(grammarAccess.getChordAccess().getNotesAssignment_2_1(), "rule__Chord__NotesAssignment_2_1");
			builder.put(grammarAccess.getChordAccess().getDurationAssignment_4(), "rule__Chord__DurationAssignment_4");
			builder.put(grammarAccess.getRepeatAccess().getTimesAssignment_1(), "rule__Repeat__TimesAssignment_1");
			builder.put(grammarAccess.getRepeatAccess().getBlocksAssignment_3(), "rule__Repeat__BlocksAssignment_3");
			builder.put(grammarAccess.getMarkAccess().getLabelAssignment_1(), "rule__Mark__LabelAssignment_1");
			builder.put(grammarAccess.getGotoAccess().getLabelAssignment_1(), "rule__Goto__LabelAssignment_1");
			builder.put(grammarAccess.getNoteValueAccess().getValueAssignment(), "rule__NoteValue__ValueAssignment");
			builder.put(grammarAccess.getDurationAccess().getValueAssignment(), "rule__Duration__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BeathovenGrammarAccess grammarAccess;

	@Override
	protected InternalBeathovenParser createParser() {
		InternalBeathovenParser result = new InternalBeathovenParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BeathovenGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BeathovenGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
