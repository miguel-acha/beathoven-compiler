/*
 * generated by Xtext 2.38.0
 */
package org.beathoven.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.beathoven.beathoven.BeathovenPackage;
import org.beathoven.beathoven.Chord;
import org.beathoven.beathoven.Duration;
import org.beathoven.beathoven.Goto;
import org.beathoven.beathoven.Instrument;
import org.beathoven.beathoven.Key;
import org.beathoven.beathoven.Mark;
import org.beathoven.beathoven.Model;
import org.beathoven.beathoven.NoteStmt;
import org.beathoven.beathoven.NoteValue;
import org.beathoven.beathoven.Repeat;
import org.beathoven.beathoven.Rest;
import org.beathoven.beathoven.Tempo;
import org.beathoven.beathoven.Time;
import org.beathoven.beathoven.Title;
import org.beathoven.services.BeathovenGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BeathovenSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BeathovenGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BeathovenPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BeathovenPackage.CHORD:
				sequence_Chord(context, (Chord) semanticObject); 
				return; 
			case BeathovenPackage.DURATION:
				sequence_Duration(context, (Duration) semanticObject); 
				return; 
			case BeathovenPackage.GOTO:
				sequence_Goto(context, (Goto) semanticObject); 
				return; 
			case BeathovenPackage.INSTRUMENT:
				sequence_Instrument(context, (Instrument) semanticObject); 
				return; 
			case BeathovenPackage.KEY:
				sequence_Key(context, (Key) semanticObject); 
				return; 
			case BeathovenPackage.MARK:
				sequence_Mark(context, (Mark) semanticObject); 
				return; 
			case BeathovenPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case BeathovenPackage.NOTE_STMT:
				sequence_NoteStmt(context, (NoteStmt) semanticObject); 
				return; 
			case BeathovenPackage.NOTE_VALUE:
				sequence_NoteValue(context, (NoteValue) semanticObject); 
				return; 
			case BeathovenPackage.REPEAT:
				sequence_Repeat(context, (Repeat) semanticObject); 
				return; 
			case BeathovenPackage.REST:
				sequence_Rest(context, (Rest) semanticObject); 
				return; 
			case BeathovenPackage.TEMPO:
				sequence_Tempo(context, (Tempo) semanticObject); 
				return; 
			case BeathovenPackage.TIME:
				sequence_Time(context, (Time) semanticObject); 
				return; 
			case BeathovenPackage.TITLE:
				sequence_Title(context, (Title) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Chord
	 *     Chord returns Chord
	 *
	 * Constraint:
	 *     (chord='[' notes+=NoteValue notes+=NoteValue* duration=Duration)
	 * </pre>
	 */
	protected void sequence_Chord(ISerializationContext context, Chord semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Duration returns Duration
	 *
	 * Constraint:
	 *     value=DUR_TOKEN
	 * </pre>
	 */
	protected void sequence_Duration(ISerializationContext context, Duration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.DURATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.DURATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDurationAccess().getValueDUR_TOKENTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Goto
	 *     Goto returns Goto
	 *
	 * Constraint:
	 *     label=ID
	 * </pre>
	 */
	protected void sequence_Goto(ISerializationContext context, Goto semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.GOTO__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.GOTO__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGotoAccess().getLabelIDTerminalRuleCall_1_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Instrument
	 *     Instrument returns Instrument
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Instrument(ISerializationContext context, Instrument semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.INSTRUMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.INSTRUMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInstrumentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Key
	 *     Key returns Key
	 *
	 * Constraint:
	 *     note=NoteValue
	 * </pre>
	 */
	protected void sequence_Key(ISerializationContext context, Key semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.KEY__NOTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.KEY__NOTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getKeyAccess().getNoteNoteValueParserRuleCall_1_0(), semanticObject.getNote());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Mark
	 *     Mark returns Mark
	 *
	 * Constraint:
	 *     label=ID
	 * </pre>
	 */
	protected void sequence_Mark(ISerializationContext context, Mark semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.MARK__LABEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.MARK__LABEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMarkAccess().getLabelIDTerminalRuleCall_1_0(), semanticObject.getLabel());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     blocks+=Block+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns NoteStmt
	 *     NoteStmt returns NoteStmt
	 *
	 * Constraint:
	 *     (pitch=NoteValue duration=Duration)
	 * </pre>
	 */
	protected void sequence_NoteStmt(ISerializationContext context, NoteStmt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.NOTE_STMT__PITCH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.NOTE_STMT__PITCH));
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.NOTE_STMT__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.NOTE_STMT__DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNoteStmtAccess().getPitchNoteValueParserRuleCall_0_0(), semanticObject.getPitch());
		feeder.accept(grammarAccess.getNoteStmtAccess().getDurationDurationParserRuleCall_1_0(), semanticObject.getDuration());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NoteValue returns NoteValue
	 *
	 * Constraint:
	 *     value=NOTE_TOKEN
	 * </pre>
	 */
	protected void sequence_NoteValue(ISerializationContext context, NoteValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.NOTE_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.NOTE_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNoteValueAccess().getValueNOTE_TOKENTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Repeat
	 *     Repeat returns Repeat
	 *
	 * Constraint:
	 *     (times=INT blocks+=Block*)
	 * </pre>
	 */
	protected void sequence_Repeat(ISerializationContext context, Repeat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Rest
	 *     Rest returns Rest
	 *
	 * Constraint:
	 *     duration=Duration
	 * </pre>
	 */
	protected void sequence_Rest(ISerializationContext context, Rest semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.REST__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.REST__DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRestAccess().getDurationDurationParserRuleCall_1_0(), semanticObject.getDuration());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Tempo
	 *     Tempo returns Tempo
	 *
	 * Constraint:
	 *     value=INT
	 * </pre>
	 */
	protected void sequence_Tempo(ISerializationContext context, Tempo semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.TEMPO__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.TEMPO__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTempoAccess().getValueINTTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Time
	 *     Time returns Time
	 *
	 * Constraint:
	 *     value=Fraction
	 * </pre>
	 */
	protected void sequence_Time(ISerializationContext context, Time semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.TIME__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.TIME__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeAccess().getValueFractionTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Block returns Title
	 *     Title returns Title
	 *
	 * Constraint:
	 *     name=STRING
	 * </pre>
	 */
	protected void sequence_Title(ISerializationContext context, Title semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BeathovenPackage.Literals.TITLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BeathovenPackage.Literals.TITLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTitleAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
